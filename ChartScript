var content= '\n\
<!DOCTYPE html>\n\
<html>\n\
  <head>\n\
    <meta charset=\"utf-8\">\n\
 	<link rel=\"stylesheet\"  href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css\"/>\n\
	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js\"></script>\n\
	<script type=\"text/javascript\" src=\'https://www.google.com/jsapi?autoload={\"modules\":[{ \"name\":\"visualization\",\"version\":\"1\", \n\
         \"packages\":[\"charteditor\", \"corechart\"]\n\
         }] \n\
      }\'></script> \n\
  </head>\n\
  <script>\n\
\n\
	$.urlParam = function(name){\n\
    		var results = new RegExp(\'[\\?&]\' + name + \'=([^&#]*)\').exec(window.location.href);\n\
    		if (results==null){\n\
      			return null;\n\
    		}else{\n\
       			return results[1] || 0;\n\
    		}\n\
	}\n\
	\n\
	$.getUrlVars = function() {\n\
    	var vars = [], hash;\n\
    	var hashes = window.location.href.slice(window.location.href.indexOf(\'?\') + 1).split(\'&\');\n\
    	for(var i = 0; i < hashes.length; i++)\n\
    	{\n\
        	hash = hashes[i].split(\'=\');\n\
        	vars.push(hash[0]);\n\
        	vars[hash[0]] = hash[1];\n\
    	}\n\
    	return vars;\n\
	}\n\
   \n\
    var socketURL = \"wss://api.scriptrapps.io/\"; //It is always the same it doesn\'t vary with subdomain\n\
	\n\
		var baseURL = window.location.origin + window.location.pathname.substring(0,window.location.pathname.indexOf(\"ChartScript\"))\n\
   		var token = $.urlParam(\'auth_token\')\n\
	\n\
	\n\
	var params = {}\n\
	$.getUrlVars().forEach(function(param) {\n\
		if(param != \'auth_token\') {\n\
		   params[param] = $.urlParam(param);\n\
		}\n\
	});\n\
\n\
	var scriptName = \"Sample\";\n\
    \n\
	var subscribeChannel = \"ChannelName\";\n\
	var dataTag = \"MyTagvalue\";\n\
\n\
    \n\
    //Instantiate Chart with configuration\n\
    google.setOnLoadCallback(loadChart);\n\
   \n\
	 //Chart Controller\n\
     var wrapper;\n\
\n\
     var instantiateWsClient = function() {\n\
       var client = new WebSocket(socketURL+token);\n\
\n\
       client.onopen = function (event) {\n\
           	//Start subscribing to the data sent over the channel to update chart\n\
        	if(subscribeChannel && subscribeChannel != \"\") {\n\
              	client.send(JSON.stringify({\n\
                	\"method\":\"Subscribe\",\n\
                    \"params\":{\n\
                        \"channel\": subscribeChannel\n\
                    }\n\
            	}));\n\
        	}\n\
           \n\
           //Load initial data\n\
           var tmp = {\n\
               \"method\": scriptName,\n\
               \"params\": {\"body\": JSON.stringify(params)}\n\
            };\n\
 			if(dataTag && dataTag != \"\") {\n\
				tmp[\"id\"] = dataTag;\n\
			}\n\
            client.send(JSON.stringify(tmp));\n\
        }\n\
         \n\
        client.onmessage = function(event) {\n\
        	var message = JSON.parse(event.data);\n\
            //message has an id with the dataTag we are expecting || we are consuming all data received over the channel we are subscribed to\n\
            //message.id.split(\"-\")[1]  this is the id format of of the message returned only when calling a method with scriptName over socket\n\
            //which is socketid-(dataTag) in case we have a dataTag\n\
            if((message.id && (message.id == dataTag || message.id.split(\"-\")[1] == dataTag)) || (!dataTag || dataTag == \"\")) {\n\
              consumeData(message.result);\n\
            } \n\
            console.log(\"Socket Data \", message);\n\
        }\n\
\n\
     }\n\
     \n\
  	 var consumeData = function(data) {\n\
		 //Only handle messages received of type object or array as the google charts expect\n\
		if(data && (data.constructor === [].constructor || data.constructor === {}.constructor)){\n\
              setDataSource(data);\n\
              //Remove loading vm.waiting = false;\n\
              $(\".loading-google-frame\").hide();\n\
        	  $(\"#scriptrChart\").show();\n\
         } \n\
	 }\n\
     \n\
      var setDataSource = function (data) {\n\
        try {\n\
          wrapper.setDataTable(data);\n\
          if(wrapper.getChartType() != null) {\n\
          	wrapper.draw();\n\
        	}\n\
        } catch(error) {\n\
          console.log(\"Invalid chart data received over socket\", data);\n\
        }\n\
      }\n\
      \n\
      var drawChart = function () {\n\
        wrapper.draw();\n\
      }\n\
      \n\
      function loadChart() {\n\
		var chart_content = {\"options\":{\"legacyScatterChartLabels\":true,\"legend\":\"right\",\"title\":\"Chart Title\",\"isStacked\":false,\"booleanRole\":\"certainty\",\"vAxes\":[{\"minValue\":null,\"maxValue\":null,\"viewWindow\":null,\"viewWindowMode\":null,\"useFormatFromData\":true},{\"useFormatFromData\":true}],\"hAxis\":{\"viewWindow\":{\"max\":null,\"min\":null},\"minValue\":null,\"maxValue\":null,\"useFormatFromData\":true},\"width\":600,\"height\":371},\"state\":{},\"view\":{\"columns\":null,\"rows\":null},\"isDefaultVisualization\":false,\"chartType\":\"BarChart\"};\n\
		delete chart_content.containerId;\n\
		chart_content[\"containerId\"] = \"scriptrChart\"\n\
   		wrapper = new google.visualization.ChartWrapper(chart_content);\n\
        if(!token) {\n\
            var output = \"Parameter your auth_token is required when using real time communication.\";\n\
            $(\"#scriptrChart\").html(output);\n\
            $(\".loading-google-frame\").hide();\n\
            $(\"#scriptrChart\").show()\n\
            return;\n\
        } else {\n\
             instantiateWsClient();\n\
        }\n\
       \n\
      }\n\
    </script>\n\
  <body>\n\
	  <div style=\"display: none;\" id=\"scriptrChart\"></div>\n\
      <div class=\'loading-google-frame\' style=\"padding: 100px;\"><i class=\'fa fa-spinner fa-spin fa-3x\'></i></div>\n\
  </body>\n\
</html>\n\
\n\
';  response.write(content);response.close();